package quiz;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class E09_EncryptFile {

	/*
	   frankenstein.txt를 시저 암호방식으로 암호환 파일 frankenstein_encrypted.enc를 생성해보세요
	   
	   (1) byte 방식으로 한 글자씩 암호화하는 속도 측정해보기
	   
	   (2) char 방식으로 한 글자씩 암호화하는 속도 측정해보기
	   
	   (3) char[] 방식으로 암호화하는 속도 측정해보기
	   
	   (4) 버퍼를 추가하여 암호화하는 속도 측정해보기
	  	
	   (5) 암호화했던 파일 복호화 해보기
	 */
	final static String CAESAR_CHARSET = 
			"ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*0123456789"
			+ "abcdefghijklmnopqrstuvwxyz[]/?;'\"";
	
	public static String encrypt(String text, int key) {
		StringBuilder sb = new StringBuilder();
		
		int lenOfCharset = CAESAR_CHARSET.length(); 
		int len = text.length();
		
		for (int i = 0; i < len; ++i) {
			char ch = text.charAt(i);
			int index = CAESAR_CHARSET.indexOf(ch);
			
			if (index != -1) {
				int cipherIndex = (index + key) % lenOfCharset;
				sb.append(CAESAR_CHARSET.charAt(cipherIndex));
			} else {
				// 암호 CHARSET에 없는 문자인 경우 그대로 더해줘야 한다
				sb.append(ch);
			}
		}
		
		return sb.toString();
	}
	
	public static void main(String[] args) {

		File f = new File("myfiles/frankenstein.txt");
		long beforeTime = System.currentTimeMillis();
		
		try (
			FileReader fin = new FileReader(f);
			BufferedReader in = new BufferedReader(fin);
		) {
			
			String line;
			
			while ((line = in.readLine()) != null) {
				//System.out.println(line);
				System.out.println(encrypt(line, 1));
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		long afterTime = System.currentTimeMillis();
		long secDiffTime = (afterTime - beforeTime);
		
		BufferedInputStream in = new BufferedInputStream(System.in);
		
		try {
			System.out.print(">> ");
			int data = in.read();
			System.out.println(data);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		InputStreamReader isr = new InputStreamReader(System.in);
		
		try {
			System.out.println("isr >> ");
			int ch = isr.read();
			
			System.out.println((char)ch);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		BufferedReader bin = new BufferedReader(isr);
		
		try {
			System.out.println("buffered >> ");
			String line = bin.readLine();
			
			System.out.println(line);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		System.out.println("시간차이(m) : " + secDiffTime);
//		long beforeTime = System.currentTimeMillis();
//		long afterTime = System.currentTimeMillis();
//		long secDiffTime = (afterTime - beforeTime);
//		System.out.println("시간차이(m) : " + secDiffTime);
	}
	
}
