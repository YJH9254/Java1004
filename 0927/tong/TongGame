package myobj.tong;

import java.util.Scanner;

public class TongGame {

	int[] answerArr;
	int stabCount = 0;

	// TongGame은 이미 위에서 class로 정의됐고 이름만 쓰면됨
	// 기본적인 TongGame의 형태는 20개의 배열로 만들어둠
	// size를 통해 개발자설정이 가능함(수정용)
	public TongGame() {
		answerArr = makeAnswerArr(20);
	}

	public TongGame(int size) {
		answerArr = makeAnswerArr(size);
	}

	/**
	 * 정답 배열을 만들어서 리턴해주는 메서드. 정답의 개수는 size의 1/5개로 결정됨. 0은 그냥 구멍, 1은 폭탄, 2는 이미 찔렀던
	 * 구멍.
	 * 
	 * @param size - 전체 구멍의 개수
	 * @return 생성된 정답 배열
	 */

	// int[] 형태로 위에서 만든 만든 makeAnswerArr(int size) 형태의
	// makeAnswerArr 클래스를 생성. int[] arr 형태로 받는다
	// answerCount = 총 크기의 1/5로 폭탄을 심어둔다
	public int[] makeAnswerArr(int size) {
		int[] arr = new int[size];

		int answerCount = size / 5;

		// 폭탄을 arr[i]에 심어둔다. shuffle이 없으면 size/5 의 크기로
		// 폭탄 갯수가 정해진다. 지금 총 20개이므로 4개가 순서대로 나온다
		for (int i = 0; i < answerCount; ++i) {
			arr[i] = 1;
		}

		// 아래 만든 인트형 배열 셔플을 통해서 순서대로 11110000... 으로 나온
		// arr이 랜덤으로 섞이게 된다. 리턴을 통해 arr은 shuffle(arr)이 됨.
		return shuffle(arr);
	}

	// 전달한 배열의 내용물을 섞어주는 기능
	public int[] shuffle(int[] arr) {
		for (int i = 0; i < 100; i++) {
			int ran = (int) (Math.random() * (arr.length - 1)) + 1;
			// arr[0]부터 temp에 넣기 시작하여 arr[ran] 랜덤 위치마다 0부터
			// 섞이게 된다. 결국 temp는 랜덤으로 1이 나오게 되고 arr[0]도 랜덤.
			int temp = arr[0];
			arr[0] = arr[ran];
			arr[ran] = temp;
		}
		return arr;
	}

	// 프린트할때 answerArr의 길이에 맞게 1부터 순서대로 배열을 나열함
	// 기존에 폭탄이 1이고 이에 숫자가 없으므로 길이에 맞게 1 ~ 지정숫자
	// 를 해야만 사용자가 숫자를 입력해서 정답을 맞출 수 있음
	public void print() {
		for (int i = 0; i < answerArr.length; ++i) {

			switch (answerArr[i]) {
			case 2:
				System.out.printf("%-2d: [x] ", i + 1);
				break;		
			default:
				System.out.printf("%-2d: [ ] ", i + 1);
				break;
			}

			// 보기 편하게 5개마다 줄바꿈
			if (i % 5 == 4) {
				System.out.println();
			}
		}
		System.out.println("시도 횟수: " + stabCount);
		System.out.println();
	}

	// 찌른 후 찔렀던 곳에 있던 숫자를 반환한다 (잘못 찌른경우 -1)
	public int stab(int num) {
		int index = num - 1;
		
		if (index < 0 || index >= answerArr.length) {
			return -1;
		}
		
		int answer = answerArr[index];

		if (answer == 0) {
			answerArr[index] = 2;
		}
		return answer;
	}

	public void play() {
		Scanner sc = new Scanner(System.in);

		while (true) {
			// 위에 print메서드가 있음
			this.print();

			System.out.print("찌를 곳을 선택해주세요>> ");
			int result = this.stab(sc.nextInt());

			if (result == 0) {
				System.out.println("살아남았습니다..");
				++stabCount;
			} else if (result == 1) {
				System.out.println("!!! 아저씨가 공중부양 합니다 !!!");
				System.out.println(++stabCount + "번만에 아저씨를 성불했습니다");
				System.out.println("------ GAME OVER ------");
				break;
			} else if (result == 2) {
				System.out.println("고마해라 마이 무어따 아이가..");
			} else if (result == -1) {
				System.out.println("범위를 벗어나는 곳을 찌를 수 없습니다...");
			}
		}
	}

}
