import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class D06_Comparator {
	
	/*
	 	# Comparable
	 	
	 	- 이 인터페이스를 구현한 클래스는 크기 비교가 가능해진다
	 	
	 	# Comparator
	 	
	 	- 이 인터페이스를 구현한 클래스는 크기 비교의 기준이 된다
	*/
	
	public static void main(String[] args) {
		
		System.out.println(10 > 20);
		
		Grape g1 = new Grape(3300, 33, 10, "대관령양떼목장", 1);
		Grape g2 = new Grape(4000, 30, 8, "김씨네포도농장", 3);
		
		System.out.println(g1.compareTo(g2));
		
		List<Integer> numbers = new ArrayList<>();
		
		Collections.addAll(numbers, 99, 1, 88, -9, 13, 15, 8, 3, 99, 100);
		Collections.sort(numbers);
		
		System.out.println(numbers);
		
//		List<Peach> peaches = new ArrayList<>();
//		
//		peaches.add(new Peach());
//		peaches.add(new Peach());
//		
//		// 리스트 정렬을 하기 위해서는 해당 리스트의 내용물이
//		// 크기 비교의 기준이 마련되어 있는 객체여야 한다
//		Collections.sort(peaches);
		
		List<Grape> grapes = new ArrayList<>();
		
		grapes.add(new Grape(3300, 33, 10, "대관령양떼목장", 1));
		grapes.add(new Grape(2300, 31, 8, "김씨네복숭아농장", 3));
		grapes.add(new Grape(3500, 29, 5, "이씨네사과농장", 1));
		grapes.add(new Grape(6300, 40, 7, "박씨네닭장", 2));
		grapes.add(new Grape(5150, 55, 8, "최가네", 1));
		grapes.add(new Grape(3000, 60, 8, "김가네", 5));
		
		
		// Comparable 인터페이스가 구현된 클래스만 sort가 가능하다
		Collections.sort(grapes);
		
		Collections.sort(grapes, new GrapeFarmNameComparator());
		Collections.reverse(grapes);
		
		System.out.println(grapes);
		
		// 복숭아 리스트
		
		Peach p1 = new Peach(7700, "B+", 5, "에브리데이");
		Peach p2 = new Peach(8800, "A", 6, "데일리팜");
		
		System.out.println(p1.compareTo(p2));
		
		
		List<String> grades  = new ArrayList<>();
		Collections.addAll(grades, "D", "D+", "C", "C+", "B", "B+", "A", "A+");
		System.out.println(grades);
		
		List<Peach> peachs = new ArrayList<>();
		
		peachs.add(new Peach(8800, "A", 6, "데일리팜"));
		peachs.add(new Peach(7700, "B+", 5, "에브리데이"));
		peachs.add(new Peach(4800, "C+", 3, "양홍장"));
		peachs.add(new Peach(3600, "C", 3, "명수네"));
		peachs.add(new Peach(2800, "D", 2, "햇사레"));
		peachs.add(new Peach(9900, "A+", 7, "물복숭아맛집"));
		
		Collections.sort(peachs, new PeachWeightComparator());
		System.out.println("2번 무게기준 내림차순: \n" + peachs);
		
		System.out.println(grades.indexOf("B+"));
		System.out.println(grades);
		
}

// 연습4 : 복숭아를 농장이름 오름차순으로 정렬하고 같은 농장인경우
//		 등급 기준 오름차순 정렬 해보세요
	
// 연습2 : 복숭아를 정렬하면 기본적으로 무게를 기준으로 내림차순 정렬되게 만들어보세요
class PeachWeightComparator implements Comparator<Peach> {
	
	@Override
	public int compare(Peach o1, Peach o2) {
		
		if (o1.weight == o2.weight) {
			return 0;
		} else if (o1.weight > o2.weight) {
			return -1;
		} else {
			return 1;
		}
	}
}

class PeachGradeComparator implements Comparator<Peach> {
	
	@Override
	public int compare(Peach o1, Peach o2) {
		
		if (o1.grade == o2.grade) {
			return 0;
		} else if (o1.weight > o2.weight) {
			return -1;
		} else {
			return 1;
		}
	}
}

	
// 연습1 : 복숭아 클래스를 마저 정의해보세요
//		 복숭아는 가격, 등급, 무게, 농장이름 필드값을 가지고 있습니다.
//		 (등급은 A+, A, B+, C+, D.. 등 영어로 매긴다)
class Peach implements Comparable<Peach> {
	int price;
	String grade;
	int weight;
	String farm;
	
	public Peach(int price, String grade, int weight, String farm) {
		this.price = price;
		this.grade = grade;
		this.weight = weight;
		this.farm = farm;
	}
	
	public int GradeNum(String grades) {
		return grades.indexOf("");
	}
	
// 연습3 : 복숭아를 등급 기준으로 오름차순 정렬하고, 등급이 같은 경우
//		 가격 기준으로 내림차순 정렬 해보세요
	@Override
	public int compareTo(Peach o) {
		
		if (this.grade == o.grade) {
			return 0;
		} else if (this.price > o.price) {
			return 1;
		} else {
			return -1;
		}
	}
	
	@Override
	public String toString() {
		return String.format("[%d/%s/%d/%s]\n",
				price, grade, weight, farm);
	}
}

class GrapeFarmNameComparator implements Comparator<Grape> {
	
	@Override
	public int compare(Grape o1, Grape o2) {
		
		if (o1.numOfFruits == o2.numOfFruits) {
			return 0;
		} else if (o1.numOfFruits > o2.numOfFruits) {
			return 1;
		} else {
			return -1;
		}
	}
}

class Grape implements Comparable<Grape> {
	int price;
	int color;
	int numOfFruits;
	int sweet;
	String farm;
	int grade;
	
	public Grape (int price, int numOfFruits, int sweet, String farm, int grade) {
		this.price = price;
		this.numOfFruits = numOfFruits;
		this.sweet = sweet;
		this.farm = farm;
		this.grade = grade;
	}
	
	@Override
	public int compareTo(Grape o) {
		// 이곳에서 현재 인스턴스와 전달되는 인스턴스의 비교 결과를 정의한다
		
		// 두 객체의 크기가 같다면 0을 리턴
		// 두 객체 중 현재 객체의 크기가 더 크다면 1을 리턴
		// 두 객체 중 매개변수로 전달받은 객체의 크기가 더 크면 -1을 리턴
		
		if (this.price == o.price) {
			return  0;
		} else if (this.grade > o.grade) {
			return -1;
		} else {
			return 1;
		}
	}
	
	@Override
	public String toString() {
		return String.format("[%d/%d/%d/%s/%d]\n",
				price, numOfFruits, sweet, farm, grade);
	}
}
