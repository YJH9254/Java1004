
1. 메모장을 킨다.
2. 아래 소스를 그대로 작성한다.
--------------------------------------------
// practice/Hello.java

public class Hello {
	public static void main(String[] args) {
		System.out.println("Hello, world!");
	}
}
--------------------------------------------
3. 내가 지정한 주소  "C:\JavaFullStack_YJH\practice"에 
   "Hello.java" 라는 이름으로 저장한다.
4. "Widnow키" + "R" 키를 동시에 누른다.
5. 빈 공간에 타자로 "cmd" 를 쳐서 실행한다.
6. cmd 창이 보이면 아래 순서대로 입력한다. 
  
cd /                     : c드라이브 지정
dir                      : 폴더 내 디렉터리 확인
cd JavaFullStatck_YJH    : JavaFullStatck_YJH 폴더를 연다   
cd practice              : practice 폴더를 연다
dir                      : practice 폴더 안에 있는 파일을 확인한다
--------------------------------------------------------------------
javac Hello.java         : 자바에 컴파일 하는 javac 명령어를 쓴다
      -----------       : "파일이름.확장자" 를 써준다. 
--------------------------------------------------------------------
java Hello               : java프로그램을 열어서 파일이름 "Hello"를 실행하는 문구 

7. 이로써 컴파일 과정이 끝났다. 우리는 메모장과 cmd등을 통하여 작업을 하였다. 
  이를 통합한 개발환경이 "IDE(Integrated Development Environment)" 이다.

 - 통합된 개발 환경 (메모장 + 콘솔 + 컴파일러 + 디버거 + ...)
 - 개발을 진행하면서 필연적으로 발생하는 과정에 사용되는 여러가지 프로그램들을
   하나로 묶어놓은 프로그램 ( 소스코드 작성-> 컴파일->실행->소스코드 수정...
 - Eclipse, IntelliJ, VsCode ... 등 

*상세한 설명(IDE에 대한)
 ㅁ소스 코드 편집기: 시각적 신호를 활용한 구문(Syntax) 강조와 같은 기능을 포함하여 소프트웨어 코드를 
       작성하도록 돕는 텍스트 편집기로서, 언어별 자동 완성 기능과 코드 작성 중 버그 검사를 제공합니다.
 ㅁ로컬 빌드 자동화: 컴퓨터 소스 코드를 바이너리 코드로 컴파일링하고, 바이너리 코드를 패키징하고 자동화
                   테스트를 실행하는 등 간편하고 반복 가능한 태스크를 개발자가 사용하는 소프트웨어의 
                   로컬 빌드를 생성할 때 자동화해주는 유틸리티입니다.
 ㅁ디버거: 원본 코드에 있는 버그 위치를 그래픽으로 표시할 수 있는 다른 프로그램을 테스트하는 프로그램입니다.
