package quiz;

import java.util.Arrays;

public class D09_CaesarCipher {
	
	/*
	 	# 시저 암호
	 	
	 	- 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 암호화하는 암호 알고리즘
	 	- 키 값만큼 평문의 모든 알파벳을 오른쪽으로 밀어주면 암호화가 되고
	 	  암호문을 다시 정해진 키 값만큼 왼쪽으로 밀어주면 복호화가 된다
	 	  
	 	  ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*0123456789
	 	  abcdefghijklmnopqrstuvwxyz[]/?;'"
	 	  
	 	  [평문]		 key: 10	[암호문]
	 	  Hello!! 	--------> 	RovvyCC
					  암호화
					  
		  [암호문]	 key: 10	[평문]
	 	  RovvyCC 	--------> 	Hello!!
					  복호화
	*/
	// 1. 평문과 키값이 전달되면 해당 평문을 암호문으로 만들어 리턴해주는 메서드
	// 2. 암호문과 키값이 전달되면 해당 암호문을 복호화하여 리턴해주는 메서드
	final static StringBuilder cipherSet = new StringBuilder(
			"ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*0123456789"
			+ "abcdefghijklmnopqrstuvwxyz[]/?;'\"");
	
	public static String cipherText(String text, int key) {
		
		String cipher = "";
		int result = 0;
		
		for (int i = 0; i < text.length(); i++) {
			char ch1 = text.charAt(i);
			for (int j = 0; j < cipherSet.length(); j++) {
				char ch2 = cipherSet.charAt(j);
				
				if (ch1 == ch2) {
				cipher += cipherSet.charAt(j + key);
				}
				
				if (cipherSet.charAt(j + key) > cipherSet.length()) {
					cipherSet.charAt(0);
				}
			}
		}
		
		return cipher;
	}
	
	public static void main(String[] args) {
		
		String text = "ADJFKADJKFA!@$!$%@!zzzzzzzzz";
		int key = 10;
		
		System.out.println(cipherText(text, key));
		System.out.println(text.charAt(0));
		System.out.println(cipherSet.charAt(0));
	}
}
